```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MyERC20Token is ERC20 {
    AggregatorV3Interface internal priceFeed;
    address public admin;
    
    constructor() ERC20("MyToken", "MTK") {
        _mint(msg.sender, 10000 * (10 ** uint256(decimals())));
        admin = msg.sender;
        // Kovan Testnet address for ETH/USD price feed; replace with mainnet address when deploying there
        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);
    }
    
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function");
        _;
    }
    
    function setPriceFeed(address _priceFeed) external onlyAdmin {
        priceFeed = AggregatorV3Interface(_priceFeed);
    }
    
    function getLatestPrice() public view returns (int) {
        (
            uint80 roundID, 
            int price,
            uint startedAt,
            uint timeStamp,
            uint80 answeredInRound
        ) = priceFeed.latestRoundData();
        
        return price;
    }
    
    function transferWithPriceCheck(address recipient, uint256 amount) public returns (bool) {
        int latestPrice = getLatestPrice();
        require(latestPrice > 0, "Price from oracle must be greater than zero");
        
        // Add your logic here based on the price. For example:
        if (latestPrice > 3000 * 10 ** 8) {
            // Transfer 5% less tokens if price is above $3000
            amount = amount * 95 / 100;
        }
        
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
}
```
